#Include 'Protheus.ch'
#Include 'FWMVCDEF.ch'
#Include 'RestFul.CH'
#INCLUDE "TOTVS.CH"
#INCLUDE "TopConn.ch"
#INCLUDE 'COLORS.CH'
#INCLUDE 'FONT.CH'
#INCLUDE 'RWMAKE.CH'
#INCLUDE "TBICONN.CH"
#include "parmtype.ch"
#INCLUDE "FWADAPTEREAI.CH"
#Include "TBICODE.CH"
#include 'fileio.ch'
#Include "Tlpp-core.th"
/*
#---------------------------------------------------------------#
| Programa:| NP3F0505                          Data:25/10/2023  |
|---------------------------------------------------------------|
| Autor:   | NP3 Tecnologia                                     |
|---------------------------------------------------------------|
| Objetivo:|Integração Fluig x Protheus x Umov                  |
|---------------------------------------------------------------|
|                        ALTERAÇÕES                             |
|---------------------------------------------------------------|
|     Analista      |   Data     |  Motivo                      |
|---------------------------------------------------------------|
|                   |            |                              |
|                   |            |                              |
#---------------------------------------------------------------#
LINK TDN: ** NÃO TEM **
*/
CLASS NP3F0505
    PRIVATE DATA cTxtErro as Character
    PRIVATE DATA cAliasZZB as Character
    PRIVATE DATA cQuery as Character
    PUBLIC METHOD New() CONSTRUCTOR
    PUBLIC METHOD EnvToUmov()
    PUBLIC METHOD RetFromUmovIn()
    PUBLIC METHOD RetToFluigIn()
    PUBLIC METHOD RetFromUmovFi()
    PUBLIC METHOD RetToFluigFi()
    PRIVATE METHOD Query()
    PUBLIC METHOD GetError()
ENDCLASS
// Construtor
METHOD New() CLASS NP3F0505
    ::cAliasZZB := GetNextAlias()
    ::cQuery    := ""
RETURN
// Envio da tarefa para o umov
METHOD EnvToUmov() CLASS NP3F0505
    Local cAliasZZB := ::cAliasZZB
    Local oUMOV     := NP3UMOV():New()
    Local aStandardS    := {}
    Local aCustomS      := {}
    Local aStandardI    := {}
    Local aStandardIs   := {}
    Local aCustomI      := {}
    Local lReproc       := SuperGetMv("P3_REPROC",,.F.)
    Local i
    // Monta o filtro
    If lReproc //Se reprocessa pendentes
        ::cQuery    := "%ZZB_IDUMOV = ''%"
    Else
        ::cQuery    := "%ZZB_IDFLUI = '"+ZZB->ZZB_IDFLUI+"'%"
    EndIf
    // Executa a query
    ::Query()
    // Preenche as informações para o umov
    While (cAliasZZB)->(!Eof())
        // Reinicia as variáveis
        aStandardS := {}
        aCustomS   := {}
        aStandardI := {}
        aStandardIs:= {}
        aCustomI   := {}
        // Buscar IDUMOV da tarefa
        ZZ9->(DbSetOrder(1))// ZZ9_FILIAL+ZZ9_CODIGO
        If ZZ9->(DbSeek(xFilial('ZZ9')+(cAliasZZB)->ZZB_CODTAR))
            // Preenche informações do schedule
            aAdd(aStandardS,{;
                {"agent",{{{"alternativeIdentifier",(cAliasZZB)->ZZB_CODVEI}}}},;
                {"serviceLocal",{{{"alternativeIdentifier",(cAliasZZB)->ZZB_LOCPA}}}},;
                {"alternativeIdentifier",AllTrim((cAliasZZB)->ZZB_IDFLUI)+AllTrim((cAliasZZB)->ZZB_SEQ)},;
                {"activitiesOrigin","7"},;
                {"date",SubStr(DToS(Date()),1,4)+"-"+SubStr(DToS(Date()),5,2)+"-"+SubStr(DToS(Date()),7,2)},;
                {"hour",SubStr(Time(),1,5)},;
                {"scheduleType",{{{"alternativeIdentifier",AllTrim(ZZ9->ZZ9_IDMOV)}}}};//{"activityRelationship",{{{"activity",{{{"alternativeIdentifier",AllTrim(ZZ9->ZZ9_IDMOV)}}}}}}};
            })
            aAdd(aCustomS,{})
            // Preenche informações do scheduleItem
            ZZC->(DbSetOrder(1))
            If ZZC->(DbSeek(xFilial("ZZC")+(cAliasZZB)->ZZB_IDFLUI+(cAliasZZB)->ZZB_SEQ))
                While ZZC->(!EOF()) .AND. ZZC->(ZZC_IDFLUI+ZZC_SEQ) == (cAliasZZB)->ZZB_IDFLUI+(cAliasZZB)->ZZB_SEQ
                    aStandardI := {}
                    aAdd(aStandardI,{;
                        {"schedule",{{{"alternativeIdentifier",AllTrim((cAliasZZB)->ZZB_IDFLUI)+AllTrim((cAliasZZB)->ZZB_SEQ)}}}},;
                        {"item",{{{"alternativeIdentifier",ZZC->ZZC_ITEM}}}};
                    })
                    aAdd(aStandardIs,aStandardI)
                    ZZC->(DbSkip())
                EndDo
            EndIf
            aAdd(aCustomI,{})
            // Envia a tarefa para o umov
            lRet := oUMOV:Schedules(aStandardS,aCustomS)
            If lRet
                For i := 1 To Len(aStandardIs)
                    lRet := oUMOV:ScheduleItems(aStandardIs[i],aCustomI)
                    If !lRet
                        ::cTxtErro := oUMOV:GetError()
                        Exit
                    EndIf
                Next
                IF lRet
                    // Posiciona pelo Recno para gravar
                    ZZB->(DbGoTo((cAliasZZB)->R_E_C_N_O_))
                    If ZZB->(Recno()) == (cAliasZZB)->R_E_C_N_O_
                        If RecLock('ZZB',.f.)
                            ZZB->ZZB_IDUMOV := oUMOV:GetIdUmov()
                            ZZB->(MsUnlock())
                        EndIf
                    EndIf
                EndIf
            Else
                ::cTxtErro := oUMOV:GetError()
            EndIf
        EndIf
        (cAliasZZB)->(DbSkip())
    EndDo
    // Finaliza o alias
    If Select(cAliasZZB) <> 0
        (cAliasZZB)->(DbCloseArea())
    EndIf
RETURN lRet
// Retorna o inicio da tarefa do umov para o protheus
METHOD RetFromUmovIn() CLASS NP3F0505
    /* TODO: preencher os campos:
    ZZB_DTINI
    ZZB_HRINI*/
RETURN
// Retorna para o fluig o inicio da tarefa
METHOD RetToFluigIn() CLASS NP3F0505
    Local cAliasZZB := ::cAliasZZB
    ::cQuery    := "%ZZB_DTINI <> '' AND ZZB_HRINI <> '' ZZB_STATUS = '1'%"// Status 1=Não iniciado
    ::Query()
    // TODO: ZZB_STATUS := "2" Iniciado
    If Select(cAliasZZB) <> 0
        (cAliasZZB)->(DbCloseArea())
    EndIf
RETURN
// Retorna o fim da tarefa do umov para o protheus
METHOD RetFromUmovFi() CLASS NP3F0505
    /* TODO: preencher os campos:
    ZZB_DTFIN
    ZZB_HRFIN
    ZZB_RESUMO
    ZZB_KM */
RETURN
// Retorna para o fluig o fim da tarefa
METHOD RetToFluigFi() CLASS NP3F0505
    Local cAliasZZB := ::cAliasZZB
    ::cQuery    := "%ZZB_DTFIN <> '' AND ZZB_HRFIN <> '' ZZB_STATUS = '2'%"// Status 2=Iniciado
    ::Query()
    // TODO: ZZB_STATUS := "3" Concluido
    If Select(cAliasZZB) <> 0
        (cAliasZZB)->(DbCloseArea())
    EndIf
RETURN
// Query de todas as funções
METHOD Query() CLASS NP3F0505
    Local cAliasZZB := ::cAliasZZB
    Local cQuery    := ::cQuery
    Local lRet      := .f.
    // Query do movimento de tarefa
    If Select(cAliasZZB) <> 0
        (cAliasZZB)->(DbCloseArea())
    EndIf
    BeginSql alias cAliasZZB
        Select * 
        from %Table:ZZB% ZZB 
        Where ZZB_FILIAL = %Exp:xFilial("ZZB")%
            and %Exp:cQuery%
            and ZZB.%notDel%
    EndSql
    If (cAliasZZB)->(!EOF())
        lRet := .t.
    EndIf
RETURN lRet
// Retorna o erro
METHOD GetError() CLASS NP3F0505
RETURN ::cTxtErro
