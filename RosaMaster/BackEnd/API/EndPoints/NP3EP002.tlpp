#Include 'Protheus.ch'
#Include 'FWMVCDEF.ch'
#Include 'RestFul.CH'
#INCLUDE "TOTVS.CH"
#INCLUDE "TopConn.ch"
#INCLUDE 'COLORS.CH'
#INCLUDE 'FONT.CH'
#INCLUDE 'RWMAKE.CH'
#INCLUDE "TBICONN.CH"
#include "parmtype.ch"
#INCLUDE "FWADAPTEREAI.CH"
#Include "TBICODE.CH"
#include 'fileio.ch'
#include 'tlpp-core.th'
/*
#---------------------------------------------------------------#
| Programa:| NP3EP002                          Data:24/10/2023  |
|---------------------------------------------------------------|
| Autor:   | NP3 Tecnologia                                     |
|---------------------------------------------------------------|
| Objetivo:| Classe do execauto de apontamento                  |
|---------------------------------------------------------------|
|                        ALTERAÇÕES                             |
|---------------------------------------------------------------|
|     Analista      |   Data     |  Motivo                      |
|---------------------------------------------------------------|
|                   |            |                              |
|                   |            |                              |
#---------------------------------------------------------------#
LINK TDN: ** NÃO TEM **
*/
CLASS NP3EP002
    PRIVATE DATA oCabec as Object
    PRIVATE DATA oItens as Object
    PRIVATE DATA aCabec as Array
    PRIVATE DATA aItem as Array
    PRIVATE DATA aItens as Array
    PRIVATE DATA aAuxCab as Array
    PRIVATE DATA aAuxIte as Array
    PRIVATE DATA cErro as Character
    PRIVATE DATA cMsg as Character
    PRIVATE DATA cRotina as Character
    PRIVATE DATA lExist as Logical
    PRIVATE DATA lRet as Logical
    PUBLIC  METHOD New(oJson,aAux,cRotina) CONSTRUCTOR
    PUBLIC  METHOD Create()
    PRIVATE METHOD Mvc()
    PRIVATE METHOD ExcAuto()
    PRIVATE METHOD AddUJ2(oModel,oModelUJ2,aStructUJ2)
    PUBLIC METHOD GetError()
    PUBLIC METHOD GetMsg()
    PRIVATE METHOD TypeField(cField,cValue)
ENDCLASS

// Construtor
METHOD New(oJson,aAux,cRotina) CLASS NP3EP002
    Local i
    Local j
    // Inicia as variaveis
    ::oCabec := oJson['ACABEC']
    ::oItens := oJson['AITENS']
    ::aAuxCab := ::oCabec:GetNames()
    ::aAuxIte := {}
    ::aCabec := {}
    ::aItens := {}
    ::cErro := ""
    ::cMsg := ""
    ::cRotina := cRotina
    // Campos baseados no plano
    UF2->(DbSetOrder(1)) //UF2_FILIAL + UF2_CODIGO 
    If UF2->(MsSeek(xFilial("UF2")+self:oCabec["UJ0_CONTRA"]))
        aAdd( ::aCabec, {'UJ0_TPSERV' , ::TypeField("UJ0_TPSERV",self:oCabec["UJ0_TPSERV"])})
        aAdd( ::aCabec, {'UJ0_CONTRA' , ::TypeField("UJ0_CONTRA",self:oCabec["UJ0_CONTRA"])})
        aAdd( ::aCabec, {'UJ0_CODBEN' , ::TypeField("UJ0_CODBEN",self:oCabec["UJ0_CODBEN"])})
        aAdd( ::aCabec, {'UJ0_PLANOC' , UF2->UF2_PLANO})
        aAdd( ::aCabec, {'UJ0_US0'    , UF2->UF2_USO})
        aAdd( ::aCabec, {'UJ0_FILSER' , ::TypeField("UJ0_FILSER",self:oCabec["UJ0_FILSER"])})
        aAdd( ::aCabec, {'UJ0_OBSERV' , ::TypeField("UJ0_OBSERV",self:oCabec["UJ0_OBSERV"])})
        aAdd( ::aCabec, {'UJ0_DTFALE' , ::TypeField("UJ0_DTFALE",self:oCabec["UJ0_DTFALE"])})
        aAdd( ::aCabec, {'UJ0_PERCDE' , Iif(UF2->UF2_PERCEN > 0, 100 - UF2->UF2_PERCEN, 0  )})
        aAdd( ::aCabec, {'UJ0_NUMSOR' , Iif(UF2->(FieldPos("UF2_NUMSO2")) > 0 .And. !Empty(UF2->UF2_NUMSO2),UF2->UF2_NUMSO2,UF2->UF2_NUMSOR)})
        aAdd( ::aCabec, {'UJ0_REGRA'  , UF2->UF2_REGRA})
        aAdd( ::aCabec, {'UJ0_XTIPO'  , ::TypeField("UJ0_XTIPO",self:oCabec["UJ0_XTIPO"])})
        // aAdd( ::aCabec, {'UJ0_TABPRC' , ::TypeField("UJ0_TABPRC",self:oCabec["UJ0_TABPRC"])})
        aAdd( ::aCabec, {'UJ0_CLIPV'  , ::TypeField("UJ0_CLIPV",self:oCabec["UJ0_CLIPV"])})
        aAdd( ::aCabec, {'UJ0_LOJAPV' , ::TypeField("UJ0_LOJAPV",self:oCabec["UJ0_LOJAPV"])})
        aAdd( ::aCabec, {'UJ0_CONDPV' , ::TypeField("UJ0_CONDPV",self:oCabec["UJ0_CONDPV"])})
        //preencho os campos de seguro na Ordem de Servico
        If UI2->(DbSeek(xFilial("UI2")+UF2->UF2_PLNSEG))
            aAdd( ::aCabec, {'UJ0_PLNSEG'   ,UF2->UF2_PLNSEG})
            aAdd( ::aCabec, {'UJ0_DSCPLN'   ,UI2->UI2_DESCRI})
            aAdd( ::aCabec, {'UJ0_PLNM'     ,UI2->UI2_MORTE})
            aAdd( ::aCabec, {'UJ0_PLNMAC'   ,UI2->UI2_MORACD})
            aAdd( ::aCabec, {'UJ0_PLNALI'   ,UI2->UI2_AUXALI})
        EndIf
        // Captura as informações do Json do cabeçalho
        // For i := 1 to Len(::aAuxCab)
        //     aAdd(::aCabec, {::aAuxCab[i], ::TypeField(::aAuxCab[i],::oCabec:GetJsonText(::aAuxCab[i])), Nil})
        // Next
        // Ordena o array do cabeçalho
        // If Len(::aCabec) > 0
        //     ::aCabec := FWVetByDic(::aCabec, "UJ0")
        // EndIf
        // Captura as informações do Json dos itens
        For i := 1 to Len(::oItens)
            ::aAuxIte := ::oItens[i]:GetNames()
            ::aItem := {}
            For j := 1 to Len(::aAuxIte)
                aAdd(::aItem, {::aAuxIte[j], ::TypeField(::aAuxIte[j],::oItens[i][::aAuxIte[j]]), Nil})
            Next
            // Ordena o array do item
            // If Len(self:aItem) > 0
            //     ::aItem := FWVetByDic(::aItem, "UJ2")
            // EndIf
            aAdd(::aItens,{})
            ::aItens[Len(::aItens)] := ::aItem
        Next
        ::lRet := .t.
    Else
        ::cErro := "Plano não encontrado: "+::aAuxCab[1]
        ::lRet := .f.
    EndIf
RETURN

// Cria o apontamento
METHOD Create() CLASS NP3EP002
    Local lRet := .f.
    // Valida se o construtor deu certo
    If ::lRet
        // Escolha da rotina utilizada
        If AllTrim(UPPER(::cRotina)) == "MVC"
            lRet := ::Mvc()
        Else
            lRet := ::ExecAuto()
        EndIf
    EndIf
RETURN lRet

// Executa o MVC
METHOD Mvc() CLASS NP3EP002
    Local lRet := .t.
    Local oModelMaster
	Local oStructMaster
	Local aStructMaster
    Local oModelUJ2    := NIL
	Local oStructUJ2   := NIL
	Local aStructUJ2   := NIL
    Local aErro         := {}
    Local nI 		    := 0
	// Local nStart    	:= 0
	Default nOpcao       	 := 3 //Inclusao de Apontamentos
    // Aqui ocorre o instaciamento do modelo de dados (Model)
	oModel := FWLoadModel( 'RFUNA034' ) // MVC do Cadastro de Apontamento de servicos
    // Temos que definir qual a operação deseja: 3-Inclusão / 4-Alteração / 5-Exclusão
	oModel:SetOperation(nOpcao)
    // Antes de atribuirmos os valores dos campos temos que ativar o modelo
	oModel:Activate()
    // objetos da enchoice
	oModelMaster 	:= oModel:GetModel('UJ0MASTER') // Instanciamos apenas referentes aos dados
	oStructMaster 	:= oModelMaster:GetStruct() // Obtemos a estrutura de dados da enchoice
	aStructMaster	:= oStructMaster:GetFields() // Obtemos os campos
    // objetos do grid da tabela UJ2 - Produtos e Servicos Internos
	oModelUJ2		:= oModel:GetModel('UJ2DETAIL') // Intanciamos apenas a parte do modelo referente ao grid
	oStructUJ2		:= oModelUJ2:GetStruct() // Obtemos a estrutura de dados do grid
	aStructUJ2		:= oStructUJ2:GetFields() // Obtemos os campos
    // percorro os campos do cabeçalho
	For nI := 1 To Len(::aCabec)
		// Verifica se os campos passados existem na estrutura do modelo
		If ( aScan(aStructMaster,{|x| AllTrim( x[3] )== AllTrim(::aCabec[nI][1]) } ) ) > 0
			// feita a atribuição do dado ao campo do Model
			If !( oModel:SetValue( 'UJ0MASTER', ::aCabec[nI][1], (::aCabec[nI][2] )) )
				lRet := .F.
				Exit
			EndIf
		EndIf
	Next nI
    // se os campos do cabeçalho foram setados com sucesso
	If lRet
		If lRet .And. Len(::aItens) > 0
			lRet := ::AddUJ2(@oModel,@oModelUJ2,aStructUJ2)
		EndIf
		// Faz-se a valida?o dos dados
		If lRet .And. ( lRet := oModel:VldData() )
			// Se o dados foram validados faz-se a gravação efetiva dos dados (commit)
			If oModel:CommitData()
                lRet := .T.
                ::cMsg := "Cadastro de Apontamento - Realizado com Sucesso" 
            EndIf
		EndIf
	EndIf
    //Se não deu certo a inclusão, mostra a mensagem de erro
    If !lRet
		// Se os dados n? foram validados obtemos a descri?o do erro para gerar LOG ou mensagem de aviso
		aErro := oModel:GetErrorMessage()
		::cErro += "Id do formulário de origem:" 	+ ' [' + AllToChar( aErro[1] ) + ']' 
		::cErro += "Id do campo de origem: " 		+ ' [' + AllToChar( aErro[2] ) + ']' 
		::cErro += "Id do formulário de erro: " 	+ ' [' + AllToChar( aErro[3] ) + ']' 
		::cErro += "Id do campo de erro: " 			+ ' [' + AllToChar( aErro[4] ) + ']' 
		::cErro += "Id do erro: " 					+ ' [' + AllToChar( aErro[5] ) + ']' 
		::cErro += "Mensagem do erro: " 			+ ' [' + AllToChar( aErro[6] ) + ']' 
		::cErro += "Mensagem da solução: " 			+ ' [' + AllToChar( aErro[7] ) + ']' 
		::cErro += "Valor atribuído: " 				+ ' [' + AllToChar( aErro[8] ) + ']' 
		::cErro += "Valor anterior: " 				+ ' [' + AllToChar( aErro[9] ) + ']' 
	EndIf
    // Desativamos o Model
	oModel:DeActivate()
RETURN lRet

// Metodo de montar o grid
METHOD AddUJ2(oModel,oModelUJ2,aStructUJ2) CLASS NP3EP002
	Local nI       := 0
	Local nJ	   := 0
	Local nItErro  := 0
	Local lRet     := .T.
    Local aErro    := {}
	UJ2->( DbSetOrder(1) ) //UJ2_FILIAL+UJ2_CODIGO+UJ2_ITEM
	For nI := 1 To Len(::aItens)
        // tenta adicionar linha
		If  ( nItErro := oModelUJ2:AddLine() ) = 0
			lRet    := .F.
			Exit
		EndIf
		if lRet
			For nJ := 1 To Len( ::aItens[nI] )
				// Verifica se os campos passados existem na estrutura de item
				If ( aScan( aStructUJ2, { |x| AllTrim( x[3] ) ==  AllTrim( ::aItens[nI][nJ][1] ) } ) ) > 0
					If !( oModel:SetValue('UJ2DETAIL', ::aItens[nI][nJ][1], ::aItens[nI][nJ][2] ) )
						// Caso a atribuição não possa ser feita, por algum motivo (validação, por exemplo)
						// o método SetValue retorna .F.
                        aErro := oModel:GetErrorMessage()
                        ::cErro += "Id do formulário de origem:" 	+ ' [' + AllToChar( aErro[1] ) + ']' 
                        ::cErro += "Id do campo de origem: " 		+ ' [' + AllToChar( aErro[2] ) + ']' 
                        ::cErro += "Id do formulário de erro: " 	+ ' [' + AllToChar( aErro[3] ) + ']' 
                        ::cErro += "Id do campo de erro: " 			+ ' [' + AllToChar( aErro[4] ) + ']' 
                        ::cErro += "Id do erro: " 					+ ' [' + AllToChar( aErro[5] ) + ']' 
                        ::cErro += "Mensagem do erro: " 			+ ' [' + AllToChar( aErro[6] ) + ']' 
                        ::cErro += "Mensagem da solução: " 			+ ' [' + AllToChar( aErro[7] ) + ']' 
                        ::cErro += "Valor atribuído: " 				+ ' [' + AllToChar( aErro[8] ) + ']' 
                        ::cErro += "Valor anterior: " 				+ ' [' + AllToChar( aErro[9] ) + ']' 
						lRet    := .F.
						nItErro := nI
						Exit
					EndIf
				EndIf
			Next
		endIf
		If !lRet
			Exit
		EndIf
	Next nI
Return lRet

// Retorna Erro
METHOD GetError() CLASS NP3EP002
RETURN ::cErro

// Retorna Mensagem
METHOD GetMsg() CLASS NP3EP002
RETURN ::cMsg

// Trata o tipo de dados
METHOD TypeField(cField,cValue) CLASS NP3EP002
    Local xRet
    Local cTipo := GetSX3Cache(cField, "X3_TIPO")
    If cTipo = "D"
        xRet := CTOD(cValue)
    Else
        xRet := cValue
    EndIF
RETURN xRet
